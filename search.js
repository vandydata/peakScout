window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"decompose_ref": {"fullname": "decompose_ref", "modulename": "decompose_ref", "kind": "module", "doc": "<p></p>\n"}, "decompose_ref.decompose_gtf": {"fullname": "decompose_ref.decompose_gtf", "modulename": "decompose_ref", "qualname": "decompose_gtf", "kind": "function", "doc": "<p>Decompose a GTF file into its various features (i.e. gene, CDS, exon, etc.).\nEach feature is further decomposed by chromosome, and the start and end\npositions of each feature are noted in the chromosomal csv files.</p>\n\n<p>Parameters:\nref_dir (str): The directory to store the GTF decompositions.\nspecies (str): The species to which the GTF corresponds.\ngtf_ref (str): The path to the GTF file.</p>\n\n<p>Returns:\nNone</p>\n\n<p>Outputs:\nThe function will produce decomposed csv files and their parent directories\nas follows:</p>\n\n<pre><code>        ref_dir/species/feature/chr{i}_[start | end].csv\n</code></pre>\n\n<p>where species is the species provided in the parameters, feature is the\nparticular feature being decomposed (i.e. gene, CDS, exon, etc), i ranges\nfrom 1 to the total number of chromosomes (and can also include non-autosomes\nsuch as X and Y and non-nuclear chromosomes such as M), and [start | end] means\nthat particular CSV file will contain the features sorted by either start or\nend position.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ref_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">species</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">gtf_ref</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "decompose_ref.save_csvs": {"fullname": "decompose_ref.save_csvs", "modulename": "decompose_ref", "qualname": "save_csvs", "kind": "function", "doc": "<p>Save a given Polars DataFrame as a CSV file.</p>\n\n<p>Parameters:\ndf (pl.DataFrame): The Polars DataFrame to save as a CSV file.\ncol (str): The column of the GTF that this DataFrame is sorted by.\n           This is either 'start' or 'end.'\nout_dir (str): The output directory of decomposed csvs.</p>\n\n<p>Returns:\nNone</p>\n\n<p>Outputs:\nThe function will save the Polars DataFrame as a CSV at location:</p>\n\n<pre><code>        out_dir/feature/chr{i}_[start | end].csv\n</code></pre>\n\n<p>where reference is the specified reference directory in ref_dir, species\nis the species given in the parameters, i ranges from i to the number of chromosomes\n(and can include non-autosomes such as X, Y, and non-nuclear chromosomes such as M), and\nstart or end indicates that this CSV contains the features sorted by either start or end\nposition, respectively.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">col</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">out_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "decompose_ref.split_jumble": {"fullname": "decompose_ref.split_jumble", "modulename": "decompose_ref", "qualname": "split_jumble", "kind": "function", "doc": "<p>Splits the attribute column of the GTF and inserts them into the given Polars\nDataFrame as additional columns. After inserting all columns, the attribute\ncolumn is removed.</p>\n\n<p>Parameters:\ndf (pl.DataFrame): The Polars DataFrame whose attribute column needs to be split.</p>\n\n<p>Returns:\ndf (pl.DataFrame): The Polars DataFrame where each element in the original attribute\n                   column is now its own column. The attribute column is also removed.</p>\n\n<p>Outputs:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "gene2peak": {"fullname": "gene2peak", "modulename": "gene2peak", "kind": "module", "doc": "<p></p>\n"}, "gene2peak.gene2peak": {"fullname": "gene2peak.gene2peak", "modulename": "gene2peak", "qualname": "gene2peak", "kind": "function", "doc": "<p>Find the nearest peaks for a given list of genes.</p>\n\n<p>Parameters:\npeak_file (str): Path to the peak file.\npeak_type (str): Type of peak caller used to generate peak file (e.g. MACS2, SEACR, BED6).\ngene_file (str): Path to the gene file.\nspecies (str): Species of the reference genome.\nnum_features (int): Number of nearest features to find.\nref_dir (str): Directory containing decomposed reference data.\noutput_name (str): Name for output file.\nout_dir (str): Directory to output file.\noutput_type (str): Output type (csv file or xlsx file).\noption (str): Option for defining start and end positions of peaks.\nboundary (int): Boundary for artificial peak boundary option. None if other options.\nconsensus (bool): Whether to use consensus peaks.</p>\n\n<p>Returns:\nNone</p>\n\n<p>Outputs:\nExcel sheet containing gene data, the nearest k peaks for each gene, and the distance\nbetween those peaks and the gene.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">peak_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">peak_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">gene_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">species</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">num_features</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">ref_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">output_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">out_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">output_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">option</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;native_peak_boundaries&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">boundary</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">consensus</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "gene2peak.find_nearest": {"fullname": "gene2peak.find_nearest", "modulename": "gene2peak", "qualname": "find_nearest", "kind": "function", "doc": "<p>Find the nearest peaks for a given list of genes. Place these in a Pandas DataFrame.</p>\n\n<p>Parameters:\ndecomposed_peaks (dict): Dictionary containing keys with chromosome number\n                         mapped to Polars DataFrames with peaks on that chromosome.\ndecomposed_genes (dict): Dictionary containing keys with chromosome number\n                         mapped to Polars DataFrames with genes on that chromosome.\nnum_features (int): Number of nearest features to find.</p>\n\n<p>Returns:\noutput (pd.DataFrame): Pandas DataFrame containing gene data, the nearest k peaks for each gene,\nand the distance between those peaks and the gene.</p>\n\n<p>Outputs:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">decomposed_peaks</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">decomposed_genes</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">num_features</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "peak2gene": {"fullname": "peak2gene", "modulename": "peak2gene", "kind": "module", "doc": "<p></p>\n"}, "peak2gene.peak2gene": {"fullname": "peak2gene.peak2gene", "modulename": "peak2gene", "qualname": "peak2gene", "kind": "function", "doc": "<p>Find the nearest genes for a given list of peaks.</p>\n\n<p>Parameters:\npeak_file (str): Path to the peak file.\npeak_type (str): Type of peak caller used to generate peak file (e.g. MACS2, SEACR, BED6).\nspecies (str): Species of the reference genome.\nnum_features (int): Number of nearest features to find.\nref_dir (str): Directory containing decomposed reference data.\noutput_name (str): Name for output file.\nout_dir (str): Directory to output file.\noutput_type (str): Output type (csv file or xlsx file).\noption (str): Option for defining start and end positions of peaks.\nboundary (int): Boundary for artificial peak boundary option. None if other options.\nup_bound (int): Maximum allowed distance between peak and upstream feature.\ndown_bound (int): Maximum allowed distance between peak and downstream feature.\nconsnsesus (bool): Whether to use consensus peaks.\npreserve (bool): Whether to preserve the original file columns.</p>\n\n<p>Returns:\nNone</p>\n\n<p>Outputs:\nExcel sheet containing peak data, the nearest k genes for each peak, and the distance\nbetween those genes and the peak.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">peak_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">peak_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">species</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">num_features</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">ref_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">output_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">out_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">output_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">option</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;native_peak_boundaries&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">boundary</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">up_bound</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">down_bound</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">consensus</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">preserve</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "peak2gene.find_nearest": {"fullname": "peak2gene.find_nearest", "modulename": "peak2gene", "qualname": "find_nearest", "kind": "function", "doc": "<p>Find the nearest genes for a given list of peaks. Place these in a Pandas DataFrame.</p>\n\n<p>Parameters:\ndecomposed_peaks (dict): Dictionary containing keys with chromosome number\n                         mapped to Polars DataFrames with peaks on that chromosome.\nspecies (str): Species of the reference genome.\nnum_features (int): Number of nearest features to find.\nref_dir (str): Directory containing decomposed reference data.\nup_bound (int): Maximum allowed distance between peak and upstream feature.\ndown_bound (int): Maximum allowed distance between peak and downstream feature.</p>\n\n<p>Returns:\noutput (pd.DataFrame): Pandas DataFrame containing peak data, the nearest k genes for each peak,\nand the distance between those genes and the peak.</p>\n\n<p>Outputs:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">decomposed_peaks</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">species</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">num_features</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">ref_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">up_bound</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">down_bound</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">preserve</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "process_features": {"fullname": "process_features", "modulename": "process_features", "kind": "module", "doc": "<p></p>\n"}, "process_features.get_nearest_features": {"fullname": "process_features.get_nearest_features", "modulename": "process_features", "qualname": "get_nearest_features", "kind": "function", "doc": "<p>Determine the nearest k features to each peak in roi using the reference\nstarts and ends.</p>\n\n<p>Parameters:\nroi (pl.DataFrame): Polars DataFrame containing peaks and relevant information.\nfeature (str): The feature of interest.\nstarts (pl.DataFrame): Polars DataFrame of reference features sorted by start position.\nends (pl.DataFrame): Polars DataFrame of reference features sorted by end position.\nup_bound (int): Maximum allowed distance between peak and upstream feature.\ndown_bound (int): Maximum allowed distance between peak and downstream feature.\nk (int): Number of nearest features to collect.\npreserve (bool): If True, preserve the original columns of the roi DataFrame.</p>\n\n<p>Returns:\nreturn_roi (pl.DataFrame): Polars DataFrame containing peak information, the\nnearest k features to that peak, and the distances between those k features\nand the peak.</p>\n\n<p>Outputs:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">roi</span><span class=\"p\">:</span> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">feature</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">starts</span><span class=\"p\">:</span> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">ends</span><span class=\"p\">:</span> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">up_bound</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">down_bound</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">preserve</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "process_features.constrain_features": {"fullname": "process_features.constrain_features", "modulename": "process_features", "qualname": "constrain_features", "kind": "function", "doc": "<p>Constrain the reference start and ends features contain only valid features --\nthose within down_bound/up_bound distance of the peak and those on one\nparticular side of the peak.</p>\n\n<p>Parameters:\npeak_start (int): Start position of peak.\npeak_end (int): End position of peak.\nstarts (np.ndarray): NumPy array of start positions of reference features.\nends (np.ndarray): NumPy array of end positions of reference features.\nstart_features (np.ndarray): NumPy array of reference features sorted by start position.\nend_features (np.ndarray): NumPy array of reference features sorted by end position.\nup_bound (int): Maximum allowed distance between peak and upstream feature.\ndown_bound (int): Maximum allowed distance between peak and downstream feature.</p>\n\n<p>Returns:\nc_starts (np.ndarray): NumPy array containing constrained start positions of reference features.\nc_ends (np.ndarray): NumPy array containing constrained end positions of reference features.\nc_start_features (np.ndarray): NumPy array containing constrained reference features sorted by start position.\nc_end_features (np.ndarray): NumPy array containing constrained reference features sorted by end position.</p>\n\n<p>Outputs:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">peak_start</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">peak_end</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">starts</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">ends</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">start_features</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">end_features</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">up_bound</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">down_bound</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "process_features.check_overlap": {"fullname": "process_features.check_overlap", "modulename": "process_features", "qualname": "check_overlap", "kind": "function", "doc": "<p>Determine if the feature at the given index overlaps with the peak.</p>\n\n<p>Parameters:\npeak_start (int): Start position of peak.\npeak_end (int): End position of peak.\nstarts (np.ndarray): NumPy array of start positions of reference features.\nindex (int): Index of the feature in question.</p>\n\n<p>Returns:\nTrue if the feature overlaps the peak; false otherwise.</p>\n\n<p>Outputs:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">peak_start</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">peak_end</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">starts</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, "process_features.find_overlaps": {"fullname": "process_features.find_overlaps", "modulename": "process_features", "qualname": "find_overlaps", "kind": "function", "doc": "<p>Find the indicies of genes that overlap with the peak.</p>\n\n<p>Parameters:\npeak_start (int): Start position of peak.\npeak_end (int): End position of peak.\nstarts (np.ndarray): NumPy array of start positions of reference features.\noverlap_features (list): A list of overlapping features from the previous peak. If this\n                         is the first peak, this list is empty.\noverlap_index (int): The index of the first feature in starts that begins after the previous peak ends.\n                     If this is the first peak, this integer is 0.</p>\n\n<p>Returns:\noverlap_features (list): A list of overlapping features for the given peak.\noverlap_index (int): Index of the first feature in starts that begins after the current peak ends.</p>\n\n<p>Outputs:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">peak_start</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">peak_end</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">starts</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">overlap_features</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">overlap_index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "process_features.gen_return_roi": {"fullname": "process_features.gen_return_roi", "modulename": "process_features", "qualname": "gen_return_roi", "kind": "function", "doc": "<p>Generates Polars DataFrame containing peak information, the nearest k features to that peak,\nand the distances between those k features and the peak.</p>\n\n<p>Parameters:\nreturn_roi (pl.DataFrame): Skeleton for return Polars DataFrame with all necessary columns.\nfeature (str): Feature in question.\nfeatures_to_add (dict): Dictionary that maps integer n with a list of the nth closest feature.\ndists_to_add (dict): Dictionary that maps integer n with a list of the distance between the peak\n                     and the nth closest feature.\nk (int): Number of closest features to determine.</p>\n\n<p>Returns:\nreturn_roi (pl.DataFrame): Polars DataFrame containing peak information, the nearest k features to that peak,\nand the distances between those k features and the peak.</p>\n\n<p>Outputs:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">return_roi</span><span class=\"p\">:</span> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">feature</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">features_to_add</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">dists_to_add</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "process_features.gen_init": {"fullname": "process_features.gen_init", "modulename": "process_features", "qualname": "gen_init", "kind": "function", "doc": "<p>Generates dictionaries to add to Polars DataFrame skeleton for nearest feature information.</p>\n\n<p>Parameters:\nk (int): Number of nearest features to determine.</p>\n\n<p>Returns:\nfeatures_to_add (dict): Dictionary that maps integer n with a list of the nth closest feature.\ndists_to_add (dict): Dictionary that maps integer n with a list of the distance between the peak\n                     and the nth closest feature.</p>\n\n<p>Outputs:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "process_features.update_to_add": {"fullname": "process_features.update_to_add", "modulename": "process_features", "qualname": "update_to_add", "kind": "function", "doc": "<p>Adds a feature and its distance from a peak to given dictionaries.</p>\n\n<p>Parameters:\nadd_features (dict): Dictionary that maps integer n with a list of the nth closest feature.\nadd_dists (dict): Dictionary that maps integer n with a list of the distance between the peak\n                     and the nth closest feature.\nfeatures (np.ndarray): NumPy array containing list of features.\ndist (int): Distance to add to dictionary.\nadd_index (int): Index of peak for updating.\nfeature_index (int): Index of feature.</p>\n\n<p>Returns:\nNone</p>\n\n<p>Outputs:\nUpdates add_features and add_dists to contain the newest feature and dist.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">add_features</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">add_dists</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">features</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">dist</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">add_index</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">feature_index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "process_features.decompose_features": {"fullname": "process_features.decompose_features", "modulename": "process_features", "qualname": "decompose_features", "kind": "function", "doc": "<p>Decompose features by chromosome.</p>\n\n<p>Parameters:\nfeatures (pl.DataFrame): Polars DataFrame containing feature information.</p>\n\n<p>Returns:\ndecomposed_features (dict): Dictionary containing keys with chromosome number\n                            mapped to Polars DataFrames with features on that chromosome.</p>\n\n<p>Outputs:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">features</span><span class=\"p\">:</span> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "process_input": {"fullname": "process_input", "modulename": "process_input", "kind": "module", "doc": "<p></p>\n"}, "process_input.process_peaks": {"fullname": "process_input.process_peaks", "modulename": "process_input", "qualname": "process_peaks", "kind": "function", "doc": "<p>Read in peak data and create a Polars DataFrame to hold the data.</p>\n\n<p>Parameters:\nfile_path (str): Path to the peak file.\npeak_type (str): Type of peak caller used to generate peak file (e.g. MACS2, SEACR, BED6).\noption (str): Option for defining start and end positions of peaks.\nboundary (int): Boundary for artificial peak boundary option. None if other options.\nconsensus (bool): Whether to use consensus peaks.</p>\n\n<p>Returns:\npeaks (pl.DataFrame): Polars DataFrame containing all relevant peak data\n                      from the input file.</p>\n\n<p>Outputs:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">peak_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">option</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">boundary</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">consensus</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "process_input.read_input_MACS2_xls": {"fullname": "process_input.read_input_MACS2_xls", "modulename": "process_input", "qualname": "read_input_MACS2_xls", "kind": "function", "doc": "<p>Read in MACS2 peak data in Excel format.</p>\n\n<p>Parameters:\nfile_path (str): Path to the peak file.</p>\n\n<p>Returns:\npeaks (pl.DataFrame): Polars DataFrame containing all relevant peak data\n                      from the input file.</p>\n\n<p>Outputs:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "process_input.read_input_MACS2_bed": {"fullname": "process_input.read_input_MACS2_bed", "modulename": "process_input", "qualname": "read_input_MACS2_bed", "kind": "function", "doc": "<p>Read in MACS2 peak data in bed format.</p>\n\n<p>Parameters:\nfile_path (str): Path to the peak file.</p>\n\n<p>Returns:\npeaks (pl.DataFrame): Polars DataFrame containing all relevant peak data\n                      from the input file.</p>\n\n<p>Outputs:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "process_input.read_input_MACS2_bed_consensus": {"fullname": "process_input.read_input_MACS2_bed_consensus", "modulename": "process_input", "qualname": "read_input_MACS2_bed_consensus", "kind": "function", "doc": "<p>Read in MACS2 peak data in bed format.</p>\n\n<p>Parameters:\nfile_path (str): Path to the peak file.</p>\n\n<p>Returns:\npeaks (pl.DataFrame): Polars DataFrame containing all relevant peak data\n                      from the input file.</p>\n\n<p>Outputs:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "process_input.read_input_SEACR": {"fullname": "process_input.read_input_SEACR", "modulename": "process_input", "qualname": "read_input_SEACR", "kind": "function", "doc": "<p>Read in SEACR peak data in bed format.</p>\n\n<p>Parameters:\nfile_path (str): Path to the peak file.</p>\n\n<p>Returns:\npeaks (pl.DataFrame): Polars DataFrame containing all relevant peak data\n                      from the input file.</p>\n\n<p>Outputs:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "process_input.read_input_BED6": {"fullname": "process_input.read_input_BED6", "modulename": "process_input", "qualname": "read_input_BED6", "kind": "function", "doc": "<p>Read in BED6 format peak data (chrom, start, end, name, score, strand).</p>\n\n<p>Parameters:\nfile_path (str): Path to the peak file.</p>\n\n<p>Returns:\npeaks (pl.DataFrame): Polars DataFrame containing all relevant peak data\n                      from the input file.</p>\n\n<p>Outputs:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "process_input.edit_peaks": {"fullname": "process_input.edit_peaks", "modulename": "process_input", "qualname": "edit_peaks", "kind": "function", "doc": "<p>Edit peak start and end positions based on option.</p>\n\n<p>Parameters:\npeaks (pl.DataFrame): Polars DataFrame containing relevant peak information.\noption (str): Option for defining start and end positions of peaks.\nboundary (int): Boundary for artificial peak boundary option. None if other options.</p>\n\n<p>Returns:\npeaks (pl.DataFrame): Polars DataFrame containing all relevant peak data\n                      from the input file with edited start and end positions.</p>\n\n<p>Outputs:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">peaks</span><span class=\"p\">:</span> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">option</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">boundary</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "process_input.process_genes": {"fullname": "process_input.process_genes", "modulename": "process_input", "qualname": "process_genes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">species</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">ref_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">polars</span><span class=\"o\">.</span><span class=\"n\">dataframe</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, "write_output": {"fullname": "write_output", "modulename": "write_output", "kind": "module", "doc": "<p></p>\n"}, "write_output.write_to_excel": {"fullname": "write_output.write_to_excel", "modulename": "write_output", "qualname": "write_to_excel", "kind": "function", "doc": "<p>Write output Pandas DataFrame to an Excel sheet</p>\n\n<p>Parameters:\noutput (pd.DataFrame): Pandas DataFrame containing peak data, the nearest k genes for each peak,\n                       and the distance between those genes and the peak.\noutput_name (str): Name for output file.\nout_dir (str): Directory to output file.</p>\n\n<p>Returns:\nNone</p>\n\n<p>Outputs:\nExcel sheet containing peak data, the nearest k genes for each peak, and the distance\nbetween those genes and the peak.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">output</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">output_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">out_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "write_output.write_to_csv": {"fullname": "write_output.write_to_csv", "modulename": "write_output", "qualname": "write_to_csv", "kind": "function", "doc": "<p>Write output Pandas DataFrame to an CSV file</p>\n\n<p>Parameters:\noutput (pd.DataFrame): Pandas DataFrame containing peak data, the nearest k genes for each peak,\n                       and the distance between those genes and the peak.\noutput_name (str): Name for output file.\nout_dir (str): Directory to output file.</p>\n\n<p>Returns:\nNone</p>\n\n<p>Outputs:\nCSV file containing peak data, the nearest k genes for each peak, and the distance\nbetween those genes and the peak.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">output</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">output_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">out_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}}, "docInfo": {"decompose_ref": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "decompose_ref.decompose_gtf": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 180}, "decompose_ref.save_csvs": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 55, "bases": 0, "doc": 155}, "decompose_ref.split_jumble": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 49, "bases": 0, "doc": 82}, "gene2peak": {"qualname": 0, "fullname": 1, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "gene2peak.gene2peak": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 176, "bases": 0, "doc": 169}, "gene2peak.find_nearest": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 104}, "peak2gene": {"qualname": 0, "fullname": 1, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "peak2gene.peak2gene": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 220, "bases": 0, "doc": 194}, "peak2gene.find_nearest": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 106, "bases": 0, "doc": 126}, "process_features": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "process_features.get_nearest_features": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 159, "bases": 0, "doc": 148}, "process_features.constrain_features": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 167, "bases": 0, "doc": 196}, "process_features.check_overlap": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 60, "bases": 0, "doc": 73}, "process_features.find_overlaps": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 85, "bases": 0, "doc": 136}, "process_features.gen_return_roi": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 99, "bases": 0, "doc": 136}, "process_features.gen_init": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 78}, "process_features.update_to_add": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 84, "bases": 0, "doc": 114}, "process_features.decompose_features": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 47}, "process_input": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "process_input.process_peaks": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 81, "bases": 0, "doc": 103}, "process_input.read_input_MACS2_xls": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 47}, "process_input.read_input_MACS2_bed": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 47}, "process_input.read_input_MACS2_bed_consensus": {"qualname": 5, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 47}, "process_input.read_input_SEACR": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 47}, "process_input.read_input_BED6": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 51}, "process_input.edit_peaks": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 72, "bases": 0, "doc": 80}, "process_input.process_genes": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 59, "bases": 0, "doc": 3}, "write_output": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "write_output.write_to_excel": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 59, "bases": 0, "doc": 84}, "write_output.write_to_csv": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 59, "bases": 0, "doc": 84}}, "length": 31, "save": true}, "index": {"qualname": {"root": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "process_features.decompose_features": {"tf": 1}}, "df": 2}}}}}}}}}, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "f": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"process_features.gen_return_roi": {"tf": 1}, "process_features.gen_init": {"tf": 1}}, "df": 2, "e": {"2": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {"gene2peak.gene2peak": {"tf": 1}}, "df": 1}}}}}, "docs": {}, "df": 0, "s": {"docs": {"process_input.process_genes": {"tf": 1}}, "df": 1}}}, "t": {"docs": {"process_features.get_nearest_features": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"decompose_ref.save_csvs": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"decompose_ref.split_jumble": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {"process_input.read_input_SEACR": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {"write_output.write_to_csv": {"tf": 1}}, "df": 1, "s": {"docs": {"decompose_ref.save_csvs": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"process_features.constrain_features": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"process_input.read_input_MACS2_bed_consensus": {"tf": 1}}, "df": 1}}}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"process_features.check_overlap": {"tf": 1}}, "df": 1}}}}}, "j": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"decompose_ref.split_jumble": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"gene2peak.find_nearest": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "process_features.find_overlaps": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"process_features.get_nearest_features": {"tf": 1}, "process_features.constrain_features": {"tf": 1}, "process_features.decompose_features": {"tf": 1}}, "df": 3}}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"gene2peak.find_nearest": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "process_features.get_nearest_features": {"tf": 1}}, "df": 3}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"2": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"peak2gene.peak2gene": {"tf": 1}}, "df": 1}}}}}, "docs": {}, "df": 0, "s": {"docs": {"process_input.process_peaks": {"tf": 1}, "process_input.edit_peaks": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"process_input.process_peaks": {"tf": 1}, "process_input.process_genes": {"tf": 1}}, "df": 2}}}}}}}, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"process_features.check_overlap": {"tf": 1}}, "df": 1, "s": {"docs": {"process_features.find_overlaps": {"tf": 1}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"process_features.gen_return_roi": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}, "process_input.read_input_SEACR": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}}, "df": 5}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {"process_features.gen_return_roi": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"process_features.gen_init": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}, "process_input.read_input_SEACR": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}}, "df": 5}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"process_features.update_to_add": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {"process_features.update_to_add": {"tf": 1}, "write_output.write_to_excel": {"tf": 1}, "write_output.write_to_csv": {"tf": 1}}, "df": 3}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {"process_features.update_to_add": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"2": {"docs": {"process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}}, "df": 3}, "docs": {}, "df": 0}}}}, "x": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"process_input.read_input_MACS2_xls": {"tf": 1}}, "df": 1}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"6": {"docs": {"process_input.read_input_BED6": {"tf": 1}}, "df": 1}, "docs": {"process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"process_input.edit_peaks": {"tf": 1}}, "df": 1}}}, "x": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"write_output.write_to_excel": {"tf": 1}}, "df": 1}}}}}, "w": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"write_output.write_to_excel": {"tf": 1}, "write_output.write_to_csv": {"tf": 1}}, "df": 2}}}}}}}, "fullname": {"root": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"decompose_ref": {"tf": 1}, "decompose_ref.decompose_gtf": {"tf": 1.4142135623730951}, "decompose_ref.save_csvs": {"tf": 1}, "decompose_ref.split_jumble": {"tf": 1}, "process_features.decompose_features": {"tf": 1}}, "df": 5}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"decompose_ref": {"tf": 1}, "decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.save_csvs": {"tf": 1}, "decompose_ref.split_jumble": {"tf": 1}}, "df": 4}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"process_features.gen_return_roi": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}, "process_input.read_input_SEACR": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}}, "df": 5}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {"process_features.gen_return_roi": {"tf": 1}}, "df": 1}}}, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "f": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"process_features.gen_return_roi": {"tf": 1}, "process_features.gen_init": {"tf": 1}}, "df": 2, "e": {"2": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {"gene2peak": {"tf": 1}, "gene2peak.gene2peak": {"tf": 1.4142135623730951}, "gene2peak.find_nearest": {"tf": 1}}, "df": 3}}}}}, "docs": {}, "df": 0, "s": {"docs": {"process_input.process_genes": {"tf": 1}}, "df": 1}}}, "t": {"docs": {"process_features.get_nearest_features": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"decompose_ref.save_csvs": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"decompose_ref.split_jumble": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {"process_input.read_input_SEACR": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "v": {"docs": {"write_output.write_to_csv": {"tf": 1}}, "df": 1, "s": {"docs": {"decompose_ref.save_csvs": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"process_features.constrain_features": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"process_input.read_input_MACS2_bed_consensus": {"tf": 1}}, "df": 1}}}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"process_features.check_overlap": {"tf": 1}}, "df": 1}}}}}, "j": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"decompose_ref.split_jumble": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"gene2peak.find_nearest": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "process_features.find_overlaps": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"process_features": {"tf": 1}, "process_features.get_nearest_features": {"tf": 1.4142135623730951}, "process_features.constrain_features": {"tf": 1.4142135623730951}, "process_features.check_overlap": {"tf": 1}, "process_features.find_overlaps": {"tf": 1}, "process_features.gen_return_roi": {"tf": 1}, "process_features.gen_init": {"tf": 1}, "process_features.update_to_add": {"tf": 1}, "process_features.decompose_features": {"tf": 1.4142135623730951}}, "df": 9}}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"gene2peak.find_nearest": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "process_features.get_nearest_features": {"tf": 1}}, "df": 3}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"2": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"peak2gene": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1}}, "df": 3}}}}}, "docs": {}, "df": 0, "s": {"docs": {"process_input.process_peaks": {"tf": 1}, "process_input.edit_peaks": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"process_features": {"tf": 1}, "process_features.get_nearest_features": {"tf": 1}, "process_features.constrain_features": {"tf": 1}, "process_features.check_overlap": {"tf": 1}, "process_features.find_overlaps": {"tf": 1}, "process_features.gen_return_roi": {"tf": 1}, "process_features.gen_init": {"tf": 1}, "process_features.update_to_add": {"tf": 1}, "process_features.decompose_features": {"tf": 1}, "process_input": {"tf": 1}, "process_input.process_peaks": {"tf": 1.4142135623730951}, "process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}, "process_input.read_input_SEACR": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}, "process_input.edit_peaks": {"tf": 1}, "process_input.process_genes": {"tf": 1.4142135623730951}}, "df": 18}}}}}}}, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"process_features.check_overlap": {"tf": 1}}, "df": 1, "s": {"docs": {"process_features.find_overlaps": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"write_output": {"tf": 1}, "write_output.write_to_excel": {"tf": 1}, "write_output.write_to_csv": {"tf": 1}}, "df": 3}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"process_features.gen_init": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"process_input": {"tf": 1}, "process_input.process_peaks": {"tf": 1}, "process_input.read_input_MACS2_xls": {"tf": 1.4142135623730951}, "process_input.read_input_MACS2_bed": {"tf": 1.4142135623730951}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1.4142135623730951}, "process_input.read_input_SEACR": {"tf": 1.4142135623730951}, "process_input.read_input_BED6": {"tf": 1.4142135623730951}, "process_input.edit_peaks": {"tf": 1}, "process_input.process_genes": {"tf": 1}}, "df": 9}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"process_features.update_to_add": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {"process_features.update_to_add": {"tf": 1}, "write_output.write_to_excel": {"tf": 1}, "write_output.write_to_csv": {"tf": 1}}, "df": 3}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {"process_features.update_to_add": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"2": {"docs": {"process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}}, "df": 3}, "docs": {}, "df": 0}}}}, "x": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"process_input.read_input_MACS2_xls": {"tf": 1}}, "df": 1}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"6": {"docs": {"process_input.read_input_BED6": {"tf": 1}}, "df": 1}, "docs": {"process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"process_input.edit_peaks": {"tf": 1}}, "df": 1}}}, "x": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"write_output.write_to_excel": {"tf": 1}}, "df": 1}}}}}, "w": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"write_output": {"tf": 1}, "write_output.write_to_excel": {"tf": 1.4142135623730951}, "write_output.write_to_csv": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}, "annotation": {"root": {"docs": {}, "df": 0}}, "default_value": {"root": {"docs": {}, "df": 0}}, "signature": {"root": {"3": {"9": {"docs": {"gene2peak.gene2peak": {"tf": 1.4142135623730951}, "peak2gene.peak2gene": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {}, "df": 0}, "docs": {"decompose_ref.decompose_gtf": {"tf": 5.656854249492381}, "decompose_ref.save_csvs": {"tf": 6.6332495807108}, "decompose_ref.split_jumble": {"tf": 6.324555320336759}, "gene2peak.gene2peak": {"tf": 11.661903789690601}, "gene2peak.find_nearest": {"tf": 6.855654600401044}, "peak2gene.peak2gene": {"tf": 13.114877048604}, "peak2gene.find_nearest": {"tf": 9.1104335791443}, "process_features.get_nearest_features": {"tf": 11.313708498984761}, "process_features.constrain_features": {"tf": 11.489125293076057}, "process_features.check_overlap": {"tf": 6.928203230275509}, "process_features.find_overlaps": {"tf": 8.18535277187245}, "process_features.gen_return_roi": {"tf": 8.774964387392123}, "process_features.gen_init": {"tf": 5.0990195135927845}, "process_features.update_to_add": {"tf": 8.12403840463596}, "process_features.decompose_features": {"tf": 5.291502622129181}, "process_input.process_peaks": {"tf": 8.06225774829855}, "process_input.read_input_MACS2_xls": {"tf": 5.291502622129181}, "process_input.read_input_MACS2_bed": {"tf": 5.291502622129181}, "process_input.read_input_MACS2_bed_consensus": {"tf": 5.291502622129181}, "process_input.read_input_SEACR": {"tf": 5.291502622129181}, "process_input.read_input_BED6": {"tf": 5.291502622129181}, "process_input.edit_peaks": {"tf": 7.681145747868608}, "process_input.process_genes": {"tf": 6.855654600401044}, "write_output.write_to_excel": {"tf": 6.855654600401044}, "write_output.write_to_csv": {"tf": 6.855654600401044}}, "df": 25, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1.4142135623730951}, "gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "process_input.process_genes": {"tf": 1}}, "df": 5}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"process_features.gen_return_roi": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {"process_features.get_nearest_features": {"tf": 1}, "process_features.gen_return_roi": {"tf": 1}}, "df": 2}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.save_csvs": {"tf": 1}, "gene2peak.gene2peak": {"tf": 1.4142135623730951}, "peak2gene.peak2gene": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1}, "process_input.process_genes": {"tf": 1}, "write_output.write_to_excel": {"tf": 1}, "write_output.write_to_csv": {"tf": 1}}, "df": 8}, "c": {"docs": {}, "df": 0, "t": {"docs": {"gene2peak.find_nearest": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1}, "process_features.gen_return_roi": {"tf": 1.4142135623730951}, "process_features.gen_init": {"tf": 1.4142135623730951}, "process_features.update_to_add": {"tf": 1.4142135623730951}, "process_features.decompose_features": {"tf": 1}}, "df": 6}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"process_features.update_to_add": {"tf": 1}}, "df": 1, "s": {"docs": {"process_features.gen_return_roi": {"tf": 1}, "process_features.update_to_add": {"tf": 1}}, "df": 2}}}}, "f": {"docs": {"decompose_ref.save_csvs": {"tf": 1}, "decompose_ref.split_jumble": {"tf": 1}}, "df": 2}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"decompose_ref.save_csvs": {"tf": 1.4142135623730951}, "decompose_ref.split_jumble": {"tf": 2}, "gene2peak.find_nearest": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "process_features.get_nearest_features": {"tf": 2.8284271247461903}, "process_features.gen_return_roi": {"tf": 2}, "process_features.decompose_features": {"tf": 1.4142135623730951}, "process_input.process_peaks": {"tf": 1.4142135623730951}, "process_input.read_input_MACS2_xls": {"tf": 1.4142135623730951}, "process_input.read_input_MACS2_bed": {"tf": 1.4142135623730951}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1.4142135623730951}, "process_input.read_input_SEACR": {"tf": 1.4142135623730951}, "process_input.read_input_BED6": {"tf": 1.4142135623730951}, "process_input.edit_peaks": {"tf": 2}, "process_input.process_genes": {"tf": 1.4142135623730951}, "write_output.write_to_excel": {"tf": 1}, "write_output.write_to_csv": {"tf": 1}}, "df": 17}}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"gene2peak.find_nearest": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1}}, "df": 2}}}}}}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"peak2gene.peak2gene": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "process_features.get_nearest_features": {"tf": 1}, "process_features.constrain_features": {"tf": 1}}, "df": 4}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1.7320508075688772}, "decompose_ref.save_csvs": {"tf": 1.4142135623730951}, "gene2peak.gene2peak": {"tf": 3}, "peak2gene.peak2gene": {"tf": 2.8284271247461903}, "peak2gene.find_nearest": {"tf": 1.4142135623730951}, "process_features.get_nearest_features": {"tf": 1}, "process_features.gen_return_roi": {"tf": 1}, "process_input.process_peaks": {"tf": 1.7320508075688772}, "process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}, "process_input.read_input_SEACR": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}, "process_input.edit_peaks": {"tf": 1}, "process_input.process_genes": {"tf": 1.7320508075688772}, "write_output.write_to_excel": {"tf": 1.4142135623730951}, "write_output.write_to_csv": {"tf": 1.4142135623730951}}, "df": 17}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"process_features.constrain_features": {"tf": 1.4142135623730951}, "process_features.check_overlap": {"tf": 1}, "process_features.find_overlaps": {"tf": 1}}, "df": 3, "s": {"docs": {"process_features.get_nearest_features": {"tf": 1}, "process_features.constrain_features": {"tf": 1}, "process_features.check_overlap": {"tf": 1}, "process_features.find_overlaps": {"tf": 1}}, "df": 4}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "process_input.process_genes": {"tf": 1}}, "df": 5}}}}}}}, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "f": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"gene2peak.gene2peak": {"tf": 1}}, "df": 1, "s": {"docs": {"gene2peak.find_nearest": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.save_csvs": {"tf": 1}, "gene2peak.gene2peak": {"tf": 1.4142135623730951}, "peak2gene.peak2gene": {"tf": 2}, "process_features.update_to_add": {"tf": 1}, "write_output.write_to_excel": {"tf": 1}, "write_output.write_to_csv": {"tf": 1}}, "df": 7}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "gene2peak.find_nearest": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}}, "df": 4, "p": {"docs": {}, "df": 0, "y": {"docs": {"process_features.constrain_features": {"tf": 2.8284271247461903}, "process_features.check_overlap": {"tf": 1}, "process_features.find_overlaps": {"tf": 1}, "process_features.update_to_add": {"tf": 1}}, "df": 4}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "write_output.write_to_excel": {"tf": 1}, "write_output.write_to_csv": {"tf": 1}}, "df": 4}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}}, "df": 2}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"process_features.constrain_features": {"tf": 2.8284271247461903}, "process_features.check_overlap": {"tf": 1}, "process_features.find_overlaps": {"tf": 1}, "process_features.update_to_add": {"tf": 1}}, "df": 4}}}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"decompose_ref.save_csvs": {"tf": 1}, "decompose_ref.split_jumble": {"tf": 1.4142135623730951}, "process_features.get_nearest_features": {"tf": 2}, "process_features.gen_return_roi": {"tf": 1.4142135623730951}, "process_features.decompose_features": {"tf": 1}, "process_input.process_peaks": {"tf": 1}, "process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}, "process_input.read_input_SEACR": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}, "process_input.edit_peaks": {"tf": 1.4142135623730951}, "process_input.process_genes": {"tf": 1}}, "df": 13}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {"gene2peak.gene2peak": {"tf": 1.7320508075688772}, "peak2gene.peak2gene": {"tf": 1.7320508075688772}, "process_features.constrain_features": {"tf": 1.4142135623730951}, "process_features.check_overlap": {"tf": 1.4142135623730951}, "process_features.find_overlaps": {"tf": 1.4142135623730951}, "process_input.process_peaks": {"tf": 1}}, "df": 6, "s": {"docs": {"gene2peak.find_nearest": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "process_input.edit_peaks": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"gene2peak.find_nearest": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "write_output.write_to_excel": {"tf": 1}, "write_output.write_to_csv": {"tf": 1}}, "df": 4}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"process_input.process_peaks": {"tf": 1}, "process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}, "process_input.read_input_SEACR": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}, "process_input.process_genes": {"tf": 1}}, "df": 7}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"peak2gene.peak2gene": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "process_features.get_nearest_features": {"tf": 1}}, "df": 3}}}}}}}}, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"decompose_ref.save_csvs": {"tf": 1}, "decompose_ref.split_jumble": {"tf": 1.4142135623730951}, "gene2peak.find_nearest": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "process_features.get_nearest_features": {"tf": 2}, "process_features.gen_return_roi": {"tf": 1.4142135623730951}, "process_features.decompose_features": {"tf": 1}, "process_input.process_peaks": {"tf": 1}, "process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}, "process_input.read_input_SEACR": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}, "process_input.edit_peaks": {"tf": 1.4142135623730951}, "process_input.process_genes": {"tf": 1}, "write_output.write_to_excel": {"tf": 1}, "write_output.write_to_csv": {"tf": 1}}, "df": 17}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"gene2peak.gene2peak": {"tf": 1.4142135623730951}, "peak2gene.peak2gene": {"tf": 1}, "process_input.process_peaks": {"tf": 1}, "process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}, "process_input.read_input_SEACR": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}, "process_input.process_genes": {"tf": 1}}, "df": 9}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"process_features.get_nearest_features": {"tf": 1}, "process_features.gen_return_roi": {"tf": 1}, "process_features.update_to_add": {"tf": 1}}, "df": 3, "s": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "gene2peak.find_nearest": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "process_features.constrain_features": {"tf": 1.4142135623730951}, "process_features.find_overlaps": {"tf": 1}, "process_features.gen_return_roi": {"tf": 1}, "process_features.update_to_add": {"tf": 1.4142135623730951}, "process_features.decompose_features": {"tf": 1}}, "df": 9}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"decompose_ref.save_csvs": {"tf": 1}}, "df": 1}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "process_input.process_peaks": {"tf": 1}}, "df": 3}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"gene2peak.find_nearest": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "write_output.write_to_excel": {"tf": 1}, "write_output.write_to_csv": {"tf": 1}}, "df": 4}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"decompose_ref.save_csvs": {"tf": 1}, "gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "write_output.write_to_excel": {"tf": 1}, "write_output.write_to_csv": {"tf": 1}}, "df": 5, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"gene2peak.gene2peak": {"tf": 1.4142135623730951}, "peak2gene.peak2gene": {"tf": 1.4142135623730951}, "write_output.write_to_excel": {"tf": 1.4142135623730951}, "write_output.write_to_csv": {"tf": 1.4142135623730951}}, "df": 4}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "process_input.process_peaks": {"tf": 1}, "process_input.edit_peaks": {"tf": 1}}, "df": 4}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"process_features.find_overlaps": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"gene2peak.gene2peak": {"tf": 1.4142135623730951}, "peak2gene.peak2gene": {"tf": 1.4142135623730951}, "process_input.process_peaks": {"tf": 1}}, "df": 3}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"process_features.constrain_features": {"tf": 1}, "process_features.find_overlaps": {"tf": 1}, "process_features.gen_init": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {"process_features.gen_return_roi": {"tf": 1.4142135623730951}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"gene2peak.gene2peak": {"tf": 1.4142135623730951}, "gene2peak.find_nearest": {"tf": 1}, "peak2gene.peak2gene": {"tf": 2}, "peak2gene.find_nearest": {"tf": 1.7320508075688772}, "process_features.get_nearest_features": {"tf": 1.7320508075688772}, "process_features.constrain_features": {"tf": 2}, "process_features.check_overlap": {"tf": 1.7320508075688772}, "process_features.find_overlaps": {"tf": 2}, "process_features.gen_return_roi": {"tf": 1}, "process_features.gen_init": {"tf": 1}, "process_features.update_to_add": {"tf": 1.7320508075688772}, "process_input.process_peaks": {"tf": 1}, "process_input.edit_peaks": {"tf": 1}}, "df": 13}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"process_features.check_overlap": {"tf": 1}, "process_features.find_overlaps": {"tf": 1}, "process_features.update_to_add": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"peak2gene.peak2gene": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1.4142135623730951}, "process_features.get_nearest_features": {"tf": 1.4142135623730951}, "process_features.constrain_features": {"tf": 1.4142135623730951}}, "df": 4, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}}, "df": 2}}}, "y": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "process_input.process_peaks": {"tf": 1}, "process_input.edit_peaks": {"tf": 1}}, "df": 4}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1}, "process_features.get_nearest_features": {"tf": 1}, "process_features.check_overlap": {"tf": 1}, "process_input.process_peaks": {"tf": 1}}, "df": 6}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {"peak2gene.peak2gene": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "process_features.get_nearest_features": {"tf": 1}, "process_features.constrain_features": {"tf": 1}}, "df": 4}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"process_features.constrain_features": {"tf": 1.4142135623730951}, "process_features.check_overlap": {"tf": 1}, "process_features.find_overlaps": {"tf": 1}}, "df": 3, "s": {"docs": {"process_features.get_nearest_features": {"tf": 1}, "process_features.constrain_features": {"tf": 1}}, "df": 2}}}}, "k": {"docs": {"process_features.get_nearest_features": {"tf": 1}, "process_features.gen_return_roi": {"tf": 1}, "process_features.gen_init": {"tf": 1}}, "df": 3}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"process_features.find_overlaps": {"tf": 1.4142135623730951}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {"process_features.gen_return_roi": {"tf": 1.4142135623730951}, "process_features.update_to_add": {"tf": 1.7320508075688772}}, "df": 2}}}}}, "bases": {"root": {"docs": {}, "df": 0}}, "doc": {"root": {"0": {"docs": {"process_features.find_overlaps": {"tf": 1}}, "df": 1}, "1": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}}, "df": 1}, "docs": {"decompose_ref": {"tf": 1.7320508075688772}, "decompose_ref.decompose_gtf": {"tf": 4.898979485566356}, "decompose_ref.save_csvs": {"tf": 4.795831523312719}, "decompose_ref.split_jumble": {"tf": 3.605551275463989}, "gene2peak": {"tf": 1.7320508075688772}, "gene2peak.gene2peak": {"tf": 4.795831523312719}, "gene2peak.find_nearest": {"tf": 3.872983346207417}, "peak2gene": {"tf": 1.7320508075688772}, "peak2gene.peak2gene": {"tf": 5}, "peak2gene.find_nearest": {"tf": 4.242640687119285}, "process_features": {"tf": 1.7320508075688772}, "process_features.get_nearest_features": {"tf": 4.47213595499958}, "process_features.constrain_features": {"tf": 4.795831523312719}, "process_features.check_overlap": {"tf": 3.872983346207417}, "process_features.find_overlaps": {"tf": 4.242640687119285}, "process_features.gen_return_roi": {"tf": 4.123105625617661}, "process_features.gen_init": {"tf": 3.7416573867739413}, "process_features.update_to_add": {"tf": 4.123105625617661}, "process_features.decompose_features": {"tf": 3.605551275463989}, "process_input": {"tf": 1.7320508075688772}, "process_input.process_peaks": {"tf": 4.123105625617661}, "process_input.read_input_MACS2_xls": {"tf": 3.605551275463989}, "process_input.read_input_MACS2_bed": {"tf": 3.605551275463989}, "process_input.read_input_MACS2_bed_consensus": {"tf": 3.605551275463989}, "process_input.read_input_SEACR": {"tf": 3.605551275463989}, "process_input.read_input_BED6": {"tf": 3.605551275463989}, "process_input.edit_peaks": {"tf": 3.872983346207417}, "process_input.process_genes": {"tf": 1.7320508075688772}, "write_output": {"tf": 1.7320508075688772}, "write_output.write_to_excel": {"tf": 3.605551275463989}, "write_output.write_to_csv": {"tf": 3.605551275463989}}, "df": 31, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "process_features.decompose_features": {"tf": 1}}, "df": 2, "d": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1.7320508075688772}, "decompose_ref.save_csvs": {"tf": 1}, "gene2peak.gene2peak": {"tf": 1}, "gene2peak.find_nearest": {"tf": 1.4142135623730951}, "peak2gene.peak2gene": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1.4142135623730951}, "process_features.decompose_features": {"tf": 1}}, "df": 7}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "process_input.process_peaks": {"tf": 1}, "process_input.edit_peaks": {"tf": 1}}, "df": 4}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"process_features.get_nearest_features": {"tf": 1}, "process_features.check_overlap": {"tf": 1}, "process_features.gen_return_roi": {"tf": 1}, "process_features.gen_init": {"tf": 1}}, "df": 4}}}}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.save_csvs": {"tf": 1.4142135623730951}, "gene2peak.gene2peak": {"tf": 1.4142135623730951}, "peak2gene.peak2gene": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1}, "write_output.write_to_excel": {"tf": 1}, "write_output.write_to_csv": {"tf": 1}}, "df": 7, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.save_csvs": {"tf": 1.4142135623730951}, "gene2peak.gene2peak": {"tf": 1.4142135623730951}, "peak2gene.peak2gene": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1}, "write_output.write_to_excel": {"tf": 1}, "write_output.write_to_csv": {"tf": 1}}, "df": 7}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}}, "df": 1}}}}}}}}, "/": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "{": {"docs": {}, "df": 0, "i": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "{": {"docs": {}, "df": 0, "i": {"docs": {"decompose_ref.save_csvs": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"process_features.update_to_add": {"tf": 1.4142135623730951}}, "df": 1, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "gene2peak.find_nearest": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1.7320508075688772}, "peak2gene.find_nearest": {"tf": 1.7320508075688772}, "process_features.get_nearest_features": {"tf": 1.4142135623730951}, "process_features.constrain_features": {"tf": 1.7320508075688772}, "process_features.gen_return_roi": {"tf": 1}, "process_features.gen_init": {"tf": 1}, "process_features.update_to_add": {"tf": 1.7320508075688772}, "write_output.write_to_excel": {"tf": 1.4142135623730951}, "write_output.write_to_csv": {"tf": 1.4142135623730951}}, "df": 11, "s": {"docs": {"process_features.get_nearest_features": {"tf": 1}, "process_features.gen_return_roi": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "s": {"docs": {"process_features.gen_return_roi": {"tf": 1}, "process_features.gen_init": {"tf": 1}, "process_features.update_to_add": {"tf": 1.4142135623730951}}, "df": 3}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"gene2peak.find_nearest": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1}, "process_features.gen_return_roi": {"tf": 1.4142135623730951}, "process_features.gen_init": {"tf": 1.4142135623730951}, "process_features.update_to_add": {"tf": 1.4142135623730951}, "process_features.decompose_features": {"tf": 1}}, "df": 6, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"gene2peak.find_nearest": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1}, "process_features.gen_return_roi": {"tf": 1.4142135623730951}, "process_features.gen_init": {"tf": 1.4142135623730951}, "process_features.update_to_add": {"tf": 1.7320508075688772}, "process_features.decompose_features": {"tf": 1}}, "df": 6}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"process_features.gen_init": {"tf": 1}, "process_features.update_to_add": {"tf": 1}}, "df": 2}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"gene2peak.gene2peak": {"tf": 1.4142135623730951}, "gene2peak.find_nearest": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1.4142135623730951}, "process_input.process_peaks": {"tf": 1.7320508075688772}, "process_input.read_input_MACS2_xls": {"tf": 1.4142135623730951}, "process_input.read_input_MACS2_bed": {"tf": 1.4142135623730951}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1.4142135623730951}, "process_input.read_input_SEACR": {"tf": 1.4142135623730951}, "process_input.read_input_BED6": {"tf": 1.4142135623730951}, "process_input.edit_peaks": {"tf": 1}, "write_output.write_to_excel": {"tf": 1.4142135623730951}, "write_output.write_to_csv": {"tf": 1.4142135623730951}}, "df": 13, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"decompose_ref.save_csvs": {"tf": 2.23606797749979}, "decompose_ref.split_jumble": {"tf": 2.23606797749979}, "gene2peak.find_nearest": {"tf": 1.7320508075688772}, "peak2gene.find_nearest": {"tf": 1.7320508075688772}, "process_features.get_nearest_features": {"tf": 3}, "process_features.gen_return_roi": {"tf": 2.23606797749979}, "process_features.gen_init": {"tf": 1}, "process_features.decompose_features": {"tf": 1.4142135623730951}, "process_input.process_peaks": {"tf": 1.7320508075688772}, "process_input.read_input_MACS2_xls": {"tf": 1.4142135623730951}, "process_input.read_input_MACS2_bed": {"tf": 1.4142135623730951}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1.4142135623730951}, "process_input.read_input_SEACR": {"tf": 1.4142135623730951}, "process_input.read_input_BED6": {"tf": 1.4142135623730951}, "process_input.edit_peaks": {"tf": 2}, "write_output.write_to_excel": {"tf": 1.7320508075688772}, "write_output.write_to_csv": {"tf": 1.7320508075688772}}, "df": 17, "s": {"docs": {"gene2peak.find_nearest": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1}, "process_features.decompose_features": {"tf": 1}}, "df": 3}}}}}}}}}, "f": {"docs": {"decompose_ref.save_csvs": {"tf": 1}, "decompose_ref.split_jumble": {"tf": 1.4142135623730951}}, "df": 2}, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"peak2gene.peak2gene": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "process_features.get_nearest_features": {"tf": 1}, "process_features.constrain_features": {"tf": 1.4142135623730951}}, "df": 4, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"peak2gene.peak2gene": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "process_features.get_nearest_features": {"tf": 1}, "process_features.constrain_features": {"tf": 1}}, "df": 4}}}}}}}}}}, "a": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.save_csvs": {"tf": 2}, "gene2peak.gene2peak": {"tf": 1}, "gene2peak.find_nearest": {"tf": 1.4142135623730951}, "peak2gene.peak2gene": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1.4142135623730951}, "process_features.find_overlaps": {"tf": 1.4142135623730951}, "process_features.gen_return_roi": {"tf": 1.4142135623730951}, "process_features.gen_init": {"tf": 1.4142135623730951}, "process_features.update_to_add": {"tf": 2}, "process_input.process_peaks": {"tf": 1}}, "df": 11, "n": {"docs": {"write_output.write_to_excel": {"tf": 1}, "write_output.write_to_csv": {"tf": 1}}, "df": 2, "d": {"docs": {"decompose_ref.decompose_gtf": {"tf": 2.6457513110645907}, "decompose_ref.save_csvs": {"tf": 1.7320508075688772}, "decompose_ref.split_jumble": {"tf": 1}, "gene2peak.gene2peak": {"tf": 1.7320508075688772}, "gene2peak.find_nearest": {"tf": 1.4142135623730951}, "peak2gene.peak2gene": {"tf": 2.23606797749979}, "peak2gene.find_nearest": {"tf": 2}, "process_features.get_nearest_features": {"tf": 2.449489742783178}, "process_features.constrain_features": {"tf": 2}, "process_features.gen_return_roi": {"tf": 2.23606797749979}, "process_features.gen_init": {"tf": 1}, "process_features.update_to_add": {"tf": 2}, "process_input.process_peaks": {"tf": 1.4142135623730951}, "process_input.edit_peaks": {"tf": 1.7320508075688772}, "write_output.write_to_excel": {"tf": 2}, "write_output.write_to_csv": {"tf": 2}}, "df": 16}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "process_input.process_peaks": {"tf": 1}, "process_input.edit_peaks": {"tf": 1}}, "df": 4}}}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"process_features.constrain_features": {"tf": 2.8284271247461903}, "process_features.check_overlap": {"tf": 1}, "process_features.find_overlaps": {"tf": 1}, "process_features.update_to_add": {"tf": 1}}, "df": 4}}}}, "s": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1.7320508075688772}, "decompose_ref.save_csvs": {"tf": 2.23606797749979}, "decompose_ref.split_jumble": {"tf": 1}}, "df": 3}, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.split_jumble": {"tf": 1}}, "df": 2}}, "l": {"docs": {"decompose_ref.split_jumble": {"tf": 1}, "process_features.gen_return_roi": {"tf": 1}, "process_input.process_peaks": {"tf": 1}, "process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}, "process_input.read_input_SEACR": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}, "process_input.edit_peaks": {"tf": 1}}, "df": 9, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"peak2gene.peak2gene": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1.4142135623730951}, "process_features.get_nearest_features": {"tf": 1.4142135623730951}, "process_features.constrain_features": {"tf": 1.4142135623730951}}, "df": 4}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.save_csvs": {"tf": 1}}, "df": 2}}}}}}}}, "t": {"docs": {"decompose_ref.save_csvs": {"tf": 1}, "process_features.check_overlap": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"decompose_ref.split_jumble": {"tf": 2.23606797749979}}, "df": 1}}}}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"process_features.gen_return_roi": {"tf": 1.4142135623730951}, "process_features.gen_init": {"tf": 1.7320508075688772}, "process_features.update_to_add": {"tf": 2.449489742783178}}, "df": 3, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"decompose_ref.split_jumble": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {"process_features.update_to_add": {"tf": 1}}, "df": 1}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"decompose_ref.split_jumble": {"tf": 1}, "process_features.find_overlaps": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "g": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "process_input.process_peaks": {"tf": 1}}, "df": 3, "t": {"docs": {}, "df": 0, "f": {"docs": {"decompose_ref.decompose_gtf": {"tf": 2.23606797749979}, "decompose_ref.save_csvs": {"tf": 1}, "decompose_ref.split_jumble": {"tf": 1}}, "df": 3}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1.4142135623730951}, "gene2peak.gene2peak": {"tf": 2.23606797749979}, "gene2peak.find_nearest": {"tf": 1.7320508075688772}}, "df": 3, "s": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "gene2peak.find_nearest": {"tf": 1.7320508075688772}, "peak2gene.peak2gene": {"tf": 1.7320508075688772}, "peak2gene.find_nearest": {"tf": 1.7320508075688772}, "process_features.find_overlaps": {"tf": 1}, "write_output.write_to_excel": {"tf": 2}, "write_output.write_to_csv": {"tf": 2}}, "df": 7}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "process_input.process_peaks": {"tf": 1}}, "df": 3, "s": {"docs": {"process_features.gen_return_roi": {"tf": 1}, "process_features.gen_init": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"decompose_ref.save_csvs": {"tf": 1.4142135623730951}, "decompose_ref.split_jumble": {"tf": 1}, "gene2peak.gene2peak": {"tf": 1}, "gene2peak.find_nearest": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "process_features.check_overlap": {"tf": 1}, "process_features.find_overlaps": {"tf": 1}, "process_features.update_to_add": {"tf": 1}}, "df": 9}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1.7320508075688772}, "decompose_ref.save_csvs": {"tf": 1.4142135623730951}, "gene2peak.gene2peak": {"tf": 3}, "peak2gene.peak2gene": {"tf": 2.8284271247461903}, "process_input.process_peaks": {"tf": 2}, "process_input.read_input_MACS2_xls": {"tf": 1.7320508075688772}, "process_input.read_input_MACS2_bed": {"tf": 1.7320508075688772}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1.7320508075688772}, "process_input.read_input_SEACR": {"tf": 1.7320508075688772}, "process_input.read_input_BED6": {"tf": 1.7320508075688772}, "process_input.edit_peaks": {"tf": 1}, "write_output.write_to_excel": {"tf": 1.4142135623730951}, "write_output.write_to_csv": {"tf": 2}}, "df": 13, "s": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1.4142135623730951}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"gene2peak.gene2peak": {"tf": 1.4142135623730951}, "gene2peak.find_nearest": {"tf": 1.4142135623730951}, "peak2gene.peak2gene": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1.4142135623730951}, "process_features.find_overlaps": {"tf": 1}}, "df": 5}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"process_features.find_overlaps": {"tf": 2}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"decompose_ref.decompose_gtf": {"tf": 2}, "peak2gene.peak2gene": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1.4142135623730951}, "process_features.get_nearest_features": {"tf": 2}, "process_features.constrain_features": {"tf": 1.4142135623730951}, "process_features.check_overlap": {"tf": 1.7320508075688772}, "process_features.find_overlaps": {"tf": 1.4142135623730951}, "process_features.gen_return_roi": {"tf": 2}, "process_features.gen_init": {"tf": 1.7320508075688772}, "process_features.update_to_add": {"tf": 2.449489742783178}, "process_features.decompose_features": {"tf": 1}}, "df": 11, "s": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1.4142135623730951}, "decompose_ref.save_csvs": {"tf": 1}, "gene2peak.gene2peak": {"tf": 1.4142135623730951}, "gene2peak.find_nearest": {"tf": 1.4142135623730951}, "peak2gene.peak2gene": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1.4142135623730951}, "process_features.get_nearest_features": {"tf": 2.449489742783178}, "process_features.constrain_features": {"tf": 3.7416573867739413}, "process_features.check_overlap": {"tf": 1}, "process_features.find_overlaps": {"tf": 2.23606797749979}, "process_features.gen_return_roi": {"tf": 2.449489742783178}, "process_features.gen_init": {"tf": 1.4142135623730951}, "process_features.update_to_add": {"tf": 2}, "process_features.decompose_features": {"tf": 2}}, "df": 14}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.save_csvs": {"tf": 1}}, "df": 2}}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "s": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {"gene2peak.gene2peak": {"tf": 2.23606797749979}, "gene2peak.find_nearest": {"tf": 1.4142135623730951}, "peak2gene.peak2gene": {"tf": 2.23606797749979}, "peak2gene.find_nearest": {"tf": 1.4142135623730951}, "process_features.find_overlaps": {"tf": 1}, "process_features.gen_return_roi": {"tf": 1}, "process_features.gen_init": {"tf": 1}, "process_features.update_to_add": {"tf": 1}, "process_input.process_peaks": {"tf": 1.4142135623730951}, "process_input.edit_peaks": {"tf": 1.4142135623730951}, "write_output.write_to_excel": {"tf": 1.7320508075688772}, "write_output.write_to_csv": {"tf": 1.7320508075688772}}, "df": 12, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}, "process_input.read_input_SEACR": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}}, "df": 5}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.save_csvs": {"tf": 1}, "process_features.find_overlaps": {"tf": 1}, "process_features.update_to_add": {"tf": 1}, "process_input.process_peaks": {"tf": 1}, "process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}, "process_input.read_input_SEACR": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}, "process_input.edit_peaks": {"tf": 1}}, "df": 11}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"process_features.check_overlap": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1.7320508075688772}, "decompose_ref.save_csvs": {"tf": 1.4142135623730951}}, "df": 2, "n": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1.4142135623730951}, "decompose_ref.save_csvs": {"tf": 1.4142135623730951}, "decompose_ref.split_jumble": {"tf": 1}, "gene2peak.find_nearest": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "process_features.get_nearest_features": {"tf": 1}, "process_features.check_overlap": {"tf": 1}, "process_features.find_overlaps": {"tf": 1.4142135623730951}, "process_features.gen_return_roi": {"tf": 1}, "process_input.process_peaks": {"tf": 1}, "process_input.read_input_MACS2_xls": {"tf": 1.4142135623730951}, "process_input.read_input_MACS2_bed": {"tf": 1.4142135623730951}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1.4142135623730951}, "process_input.read_input_SEACR": {"tf": 1.4142135623730951}, "process_input.read_input_BED6": {"tf": 1}}, "df": 15, "t": {"docs": {"gene2peak.gene2peak": {"tf": 1.4142135623730951}, "gene2peak.find_nearest": {"tf": 1}, "peak2gene.peak2gene": {"tf": 2}, "peak2gene.find_nearest": {"tf": 1.7320508075688772}, "process_features.get_nearest_features": {"tf": 1.7320508075688772}, "process_features.constrain_features": {"tf": 2}, "process_features.check_overlap": {"tf": 1.7320508075688772}, "process_features.find_overlaps": {"tf": 2}, "process_features.gen_return_roi": {"tf": 1}, "process_features.gen_init": {"tf": 1}, "process_features.update_to_add": {"tf": 1.7320508075688772}, "process_input.process_peaks": {"tf": 1}, "process_input.edit_peaks": {"tf": 1}}, "df": 13, "o": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.split_jumble": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"process_features.get_nearest_features": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"process_features.find_overlaps": {"tf": 1}, "process_features.gen_return_roi": {"tf": 1.4142135623730951}, "process_features.gen_init": {"tf": 1.4142135623730951}, "process_features.update_to_add": {"tf": 1.4142135623730951}}, "df": 4}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.save_csvs": {"tf": 1}}, "df": 2}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"decompose_ref.save_csvs": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"process_features.find_overlaps": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {"process_features.check_overlap": {"tf": 1.7320508075688772}, "process_features.find_overlaps": {"tf": 2}, "process_features.update_to_add": {"tf": 2}}, "df": 3}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"decompose_ref.split_jumble": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"decompose_ref.split_jumble": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"process_features.get_nearest_features": {"tf": 1.4142135623730951}, "process_features.gen_return_roi": {"tf": 1.4142135623730951}, "process_features.gen_init": {"tf": 1}, "process_features.decompose_features": {"tf": 1}, "process_input.edit_peaks": {"tf": 1}}, "df": 5}}}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"process_input.process_peaks": {"tf": 1}, "process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}, "process_input.read_input_SEACR": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}, "process_input.edit_peaks": {"tf": 1}}, "df": 7}}}}, "t": {"docs": {}, "df": 0, "s": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.split_jumble": {"tf": 1}, "process_features.update_to_add": {"tf": 1}}, "df": 3}}, "s": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1.7320508075688772}, "decompose_ref.save_csvs": {"tf": 2}, "decompose_ref.split_jumble": {"tf": 1.7320508075688772}, "process_features.find_overlaps": {"tf": 2}}, "df": 4}, "f": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "process_features.get_nearest_features": {"tf": 1}, "process_features.check_overlap": {"tf": 1.4142135623730951}, "process_features.find_overlaps": {"tf": 1.4142135623730951}, "process_input.process_peaks": {"tf": 1}, "process_input.edit_peaks": {"tf": 1}}, "df": 7}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"process_features.constrain_features": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1.4142135623730951}, "gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "process_input.process_peaks": {"tf": 1}}, "df": 4, "x": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1.4142135623730951}}, "df": 1}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "process_input.read_input_MACS2_xls": {"tf": 1}, "write_output.write_to_excel": {"tf": 1.4142135623730951}}, "df": 4}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1.4142135623730951}}, "df": 1}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1.4142135623730951}, "decompose_ref.split_jumble": {"tf": 1}, "gene2peak.gene2peak": {"tf": 1}, "gene2peak.find_nearest": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "process_features.get_nearest_features": {"tf": 1}, "write_output.write_to_excel": {"tf": 1.4142135623730951}, "write_output.write_to_csv": {"tf": 1.4142135623730951}}, "df": 9}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"decompose_ref.decompose_gtf": {"tf": 2}, "decompose_ref.save_csvs": {"tf": 2}, "gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "process_features.get_nearest_features": {"tf": 1}, "process_features.constrain_features": {"tf": 2.8284271247461903}, "process_features.check_overlap": {"tf": 1.4142135623730951}, "process_features.find_overlaps": {"tf": 1.4142135623730951}, "process_input.process_peaks": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}, "process_input.edit_peaks": {"tf": 1.7320508075688772}}, "df": 11, "s": {"docs": {"process_features.get_nearest_features": {"tf": 1.4142135623730951}, "process_features.constrain_features": {"tf": 1.7320508075688772}, "process_features.find_overlaps": {"tf": 1.4142135623730951}}, "df": 3}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.save_csvs": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"decompose_ref.split_jumble": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"process_features.find_overlaps": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"process_input.edit_peaks": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"process_input.edit_peaks": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {"process_features.constrain_features": {"tf": 2}}, "df": 1, "d": {"docs": {}, "df": 0, "s": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1.4142135623730951}}, "df": 1}}, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"process_input.read_input_BED6": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "gene2peak.find_nearest": {"tf": 2}, "peak2gene.find_nearest": {"tf": 1.4142135623730951}, "process_features.decompose_features": {"tf": 1.7320508075688772}}, "df": 4, "s": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1.4142135623730951}, "decompose_ref.save_csvs": {"tf": 1.4142135623730951}}, "df": 2}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}}, "df": 1}}}}}}}}}}, "s": {"docs": {}, "df": 0, "v": {"docs": {"decompose_ref.decompose_gtf": {"tf": 2}, "decompose_ref.save_csvs": {"tf": 2.23606797749979}, "gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "write_output.write_to_csv": {"tf": 1.4142135623730951}}, "df": 5, "s": {"docs": {"decompose_ref.save_csvs": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}}, "df": 1}}}}}}}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "process_features.constrain_features": {"tf": 1}, "process_features.update_to_add": {"tf": 1}}, "df": 3, "s": {"docs": {"decompose_ref.save_csvs": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"gene2peak.gene2peak": {"tf": 1.4142135623730951}, "gene2peak.find_nearest": {"tf": 1.7320508075688772}, "peak2gene.peak2gene": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1.7320508075688772}, "process_features.get_nearest_features": {"tf": 1.4142135623730951}, "process_features.constrain_features": {"tf": 2}, "process_features.gen_return_roi": {"tf": 1.4142135623730951}, "process_features.update_to_add": {"tf": 1}, "process_features.decompose_features": {"tf": 1.4142135623730951}, "process_input.process_peaks": {"tf": 1}, "process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}, "process_input.read_input_SEACR": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}, "process_input.edit_peaks": {"tf": 1.4142135623730951}, "write_output.write_to_excel": {"tf": 1.4142135623730951}, "write_output.write_to_csv": {"tf": 1.4142135623730951}}, "df": 18}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"gene2peak.gene2peak": {"tf": 1.4142135623730951}, "peak2gene.peak2gene": {"tf": 1}, "process_input.process_peaks": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"peak2gene.peak2gene": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"process_features.constrain_features": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"process_features.constrain_features": {"tf": 2}}, "df": 1}}}}}}}}}, "l": {"docs": {"decompose_ref.save_csvs": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"decompose_ref.save_csvs": {"tf": 1}, "decompose_ref.split_jumble": {"tf": 2.449489742783178}}, "df": 2, "s": {"docs": {"decompose_ref.split_jumble": {"tf": 1.4142135623730951}, "peak2gene.peak2gene": {"tf": 1}, "process_features.get_nearest_features": {"tf": 1}, "process_features.gen_return_roi": {"tf": 1}}, "df": 4}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"process_features.get_nearest_features": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.save_csvs": {"tf": 1}}, "df": 2}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "process_input.process_peaks": {"tf": 1}}, "df": 3}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"process_features.find_overlaps": {"tf": 1}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"process_features.gen_return_roi": {"tf": 1.7320508075688772}, "process_features.gen_init": {"tf": 1.4142135623730951}, "process_features.update_to_add": {"tf": 1.4142135623730951}}, "df": 3}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"process_input.process_peaks": {"tf": 1}}, "df": 1}}}}}}, "b": {"docs": {}, "df": 0, "y": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1.4142135623730951}, "decompose_ref.save_csvs": {"tf": 1.4142135623730951}, "process_features.get_nearest_features": {"tf": 1.4142135623730951}, "process_features.constrain_features": {"tf": 2}, "process_features.decompose_features": {"tf": 1}}, "df": 5}, "e": {"docs": {"decompose_ref.split_jumble": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}}, "df": 1}}}, "d": {"6": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "process_input.process_peaks": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}}, "df": 4}, "docs": {"process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}, "process_input.read_input_SEACR": {"tf": 1}}, "df": 3}, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "gene2peak.find_nearest": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1.7320508075688772}, "peak2gene.find_nearest": {"tf": 1.7320508075688772}, "process_features.get_nearest_features": {"tf": 1.7320508075688772}, "process_features.constrain_features": {"tf": 1.4142135623730951}, "process_features.gen_return_roi": {"tf": 1.7320508075688772}, "process_features.gen_init": {"tf": 1}, "process_features.update_to_add": {"tf": 1}, "write_output.write_to_excel": {"tf": 1.4142135623730951}, "write_output.write_to_csv": {"tf": 1.4142135623730951}}, "df": 11}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"process_features.find_overlaps": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"peak2gene.peak2gene": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1.4142135623730951}, "process_features.get_nearest_features": {"tf": 1.4142135623730951}, "process_features.constrain_features": {"tf": 1.7320508075688772}}, "df": 4, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"gene2peak.gene2peak": {"tf": 1.7320508075688772}, "peak2gene.peak2gene": {"tf": 1.7320508075688772}, "process_input.process_peaks": {"tf": 1.7320508075688772}, "process_input.edit_peaks": {"tf": 1.7320508075688772}}, "df": 4}}}, "/": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"process_features.constrain_features": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1.4142135623730951}, "process_features.get_nearest_features": {"tf": 1}, "process_input.process_peaks": {"tf": 1}}, "df": 4}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"process_input.edit_peaks": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {"decompose_ref.decompose_gtf": {"tf": 3.7416573867739413}, "decompose_ref.save_csvs": {"tf": 3.3166247903554}, "decompose_ref.split_jumble": {"tf": 2.8284271247461903}, "gene2peak.gene2peak": {"tf": 2.6457513110645907}, "gene2peak.find_nearest": {"tf": 2}, "peak2gene.peak2gene": {"tf": 2.6457513110645907}, "peak2gene.find_nearest": {"tf": 2.23606797749979}, "process_features.get_nearest_features": {"tf": 2.8284271247461903}, "process_features.constrain_features": {"tf": 1.7320508075688772}, "process_features.check_overlap": {"tf": 2.449489742783178}, "process_features.find_overlaps": {"tf": 3.3166247903554}, "process_features.gen_return_roi": {"tf": 3.1622776601683795}, "process_features.gen_init": {"tf": 2}, "process_features.update_to_add": {"tf": 2.23606797749979}, "process_input.process_peaks": {"tf": 1.7320508075688772}, "process_input.read_input_MACS2_xls": {"tf": 1.4142135623730951}, "process_input.read_input_MACS2_bed": {"tf": 1.4142135623730951}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1.4142135623730951}, "process_input.read_input_SEACR": {"tf": 1.4142135623730951}, "process_input.read_input_BED6": {"tf": 1.4142135623730951}, "process_input.edit_peaks": {"tf": 1}, "write_output.write_to_excel": {"tf": 2.449489742783178}, "write_output.write_to_csv": {"tf": 2.449489742783178}}, "df": 23, "i": {"docs": {}, "df": 0, "r": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}}, "df": 1}}, "m": {"docs": {"decompose_ref.split_jumble": {"tf": 1}}, "df": 1}, "s": {"docs": {}, "df": 0, "e": {"docs": {"gene2peak.find_nearest": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.save_csvs": {"tf": 1.4142135623730951}, "gene2peak.find_nearest": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1}, "process_features.get_nearest_features": {"tf": 1}, "process_features.find_overlaps": {"tf": 1.7320508075688772}, "process_features.gen_return_roi": {"tf": 2}, "process_features.gen_init": {"tf": 1.4142135623730951}, "process_features.update_to_add": {"tf": 1.4142135623730951}, "process_features.decompose_features": {"tf": 1}}, "df": 10}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"decompose_ref.save_csvs": {"tf": 1.7320508075688772}, "process_features.find_overlaps": {"tf": 2}}, "df": 2}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "gene2peak.find_nearest": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "process_features.get_nearest_features": {"tf": 1}, "process_features.constrain_features": {"tf": 1.4142135623730951}, "process_features.gen_return_roi": {"tf": 1.4142135623730951}, "write_output.write_to_excel": {"tf": 1.4142135623730951}, "write_output.write_to_csv": {"tf": 1.4142135623730951}}, "df": 9}}}}, "o": {"docs": {"decompose_ref.decompose_gtf": {"tf": 2}, "decompose_ref.save_csvs": {"tf": 1.4142135623730951}, "decompose_ref.split_jumble": {"tf": 1}, "gene2peak.gene2peak": {"tf": 2.449489742783178}, "gene2peak.find_nearest": {"tf": 1.7320508075688772}, "peak2gene.peak2gene": {"tf": 2.449489742783178}, "peak2gene.find_nearest": {"tf": 1.4142135623730951}, "process_features.get_nearest_features": {"tf": 1.7320508075688772}, "process_features.gen_return_roi": {"tf": 2.23606797749979}, "process_features.gen_init": {"tf": 2.23606797749979}, "process_features.update_to_add": {"tf": 2}, "process_features.decompose_features": {"tf": 1}, "process_input.process_peaks": {"tf": 2}, "process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}, "process_input.read_input_SEACR": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}, "write_output.write_to_excel": {"tf": 1.4142135623730951}, "write_output.write_to_csv": {"tf": 1.4142135623730951}}, "df": 20, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"gene2peak.gene2peak": {"tf": 2}, "peak2gene.peak2gene": {"tf": 2}, "process_input.process_peaks": {"tf": 1.4142135623730951}}, "df": 3}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"process_features.get_nearest_features": {"tf": 1}, "process_features.check_overlap": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"decompose_ref.decompose_gtf": {"tf": 2}, "decompose_ref.save_csvs": {"tf": 2}, "gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "process_features.get_nearest_features": {"tf": 1}, "process_features.constrain_features": {"tf": 3}, "process_features.check_overlap": {"tf": 1.7320508075688772}, "process_features.find_overlaps": {"tf": 1.7320508075688772}, "process_input.process_peaks": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}, "process_input.edit_peaks": {"tf": 1.7320508075688772}}, "df": 11, "s": {"docs": {"process_features.get_nearest_features": {"tf": 1.4142135623730951}, "process_features.constrain_features": {"tf": 1.4142135623730951}, "process_features.check_overlap": {"tf": 1}, "process_features.find_overlaps": {"tf": 1.7320508075688772}}, "df": 4}}}}, "r": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1.7320508075688772}, "decompose_ref.save_csvs": {"tf": 1.4142135623730951}, "gene2peak.gene2peak": {"tf": 3}, "peak2gene.peak2gene": {"tf": 2.8284271247461903}, "peak2gene.find_nearest": {"tf": 1.4142135623730951}, "process_features.get_nearest_features": {"tf": 1}, "process_features.gen_return_roi": {"tf": 1}, "process_input.process_peaks": {"tf": 1.7320508075688772}, "process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}, "process_input.read_input_SEACR": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}, "process_input.edit_peaks": {"tf": 1}, "write_output.write_to_excel": {"tf": 1.4142135623730951}, "write_output.write_to_csv": {"tf": 1.4142135623730951}}, "df": 16, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"process_input.read_input_BED6": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"decompose_ref.decompose_gtf": {"tf": 2}, "decompose_ref.save_csvs": {"tf": 1.4142135623730951}, "gene2peak.gene2peak": {"tf": 1.4142135623730951}, "peak2gene.peak2gene": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1.4142135623730951}}, "df": 5}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"decompose_ref.save_csvs": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"decompose_ref.split_jumble": {"tf": 1}}, "df": 1, "s": {"docs": {"decompose_ref.split_jumble": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1.4142135623730951}, "decompose_ref.save_csvs": {"tf": 1.4142135623730951}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.save_csvs": {"tf": 1.4142135623730951}, "process_features.get_nearest_features": {"tf": 1.4142135623730951}, "process_features.constrain_features": {"tf": 2}}, "df": 4}}}}}, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"decompose_ref.save_csvs": {"tf": 1.7320508075688772}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "process_input.process_peaks": {"tf": 1}, "process_input.read_input_SEACR": {"tf": 1}}, "df": 4}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "write_output.write_to_excel": {"tf": 1.4142135623730951}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"process_features.constrain_features": {"tf": 1}}, "df": 1}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"process_features.gen_return_roi": {"tf": 1}, "process_features.gen_init": {"tf": 1}}, "df": 2}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"process_input.read_input_BED6": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.save_csvs": {"tf": 1}, "process_features.get_nearest_features": {"tf": 1.4142135623730951}, "process_features.constrain_features": {"tf": 2.449489742783178}, "process_features.check_overlap": {"tf": 1.4142135623730951}, "process_features.find_overlaps": {"tf": 1.4142135623730951}}, "df": 6, "s": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "process_features.constrain_features": {"tf": 2}, "process_features.check_overlap": {"tf": 1}, "process_features.find_overlaps": {"tf": 1}, "process_input.process_peaks": {"tf": 1}, "process_input.edit_peaks": {"tf": 1.7320508075688772}}, "df": 8}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"decompose_ref.save_csvs": {"tf": 1.7320508075688772}, "decompose_ref.split_jumble": {"tf": 1.7320508075688772}, "gene2peak.find_nearest": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1}, "process_features.get_nearest_features": {"tf": 2}, "process_features.gen_return_roi": {"tf": 1.7320508075688772}, "process_features.gen_init": {"tf": 1}, "process_features.decompose_features": {"tf": 1.4142135623730951}, "process_input.process_peaks": {"tf": 1.4142135623730951}, "process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}, "process_input.read_input_SEACR": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}, "process_input.edit_peaks": {"tf": 1.4142135623730951}}, "df": 15}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1.4142135623730951}, "decompose_ref.save_csvs": {"tf": 1.4142135623730951}, "decompose_ref.split_jumble": {"tf": 1}, "gene2peak.gene2peak": {"tf": 1}, "gene2peak.find_nearest": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "process_features.get_nearest_features": {"tf": 1}, "process_features.constrain_features": {"tf": 1}, "process_features.check_overlap": {"tf": 1}, "process_features.find_overlaps": {"tf": 1}, "process_features.gen_return_roi": {"tf": 1}, "process_features.gen_init": {"tf": 1}, "process_features.update_to_add": {"tf": 1}, "process_features.decompose_features": {"tf": 1}, "process_input.process_peaks": {"tf": 1}, "process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}, "process_input.read_input_SEACR": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}, "process_input.edit_peaks": {"tf": 1}, "write_output.write_to_excel": {"tf": 1}, "write_output.write_to_csv": {"tf": 1}}, "df": 24}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1.4142135623730951}, "process_features.constrain_features": {"tf": 1}}, "df": 2}}}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "gene2peak.gene2peak": {"tf": 1.4142135623730951}, "peak2gene.peak2gene": {"tf": 1}, "process_input.process_peaks": {"tf": 1.4142135623730951}, "process_input.read_input_MACS2_xls": {"tf": 1.4142135623730951}, "process_input.read_input_MACS2_bed": {"tf": 1.4142135623730951}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1.4142135623730951}, "process_input.read_input_SEACR": {"tf": 1.4142135623730951}, "process_input.read_input_BED6": {"tf": 1.4142135623730951}}, "df": 9}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"gene2peak.find_nearest": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1.4142135623730951}, "write_output.write_to_excel": {"tf": 1.4142135623730951}, "write_output.write_to_csv": {"tf": 1.4142135623730951}}, "df": 4}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"peak2gene.peak2gene": {"tf": 1.4142135623730951}, "process_features.get_nearest_features": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"process_features.find_overlaps": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "l": {"docs": {"decompose_ref.save_csvs": {"tf": 1}, "decompose_ref.split_jumble": {"tf": 1.4142135623730951}, "process_features.get_nearest_features": {"tf": 2}, "process_features.gen_return_roi": {"tf": 1.4142135623730951}, "process_features.decompose_features": {"tf": 1}, "process_input.process_peaks": {"tf": 1}, "process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}, "process_input.read_input_SEACR": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}, "process_input.edit_peaks": {"tf": 1.4142135623730951}}, "df": 12, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"gene2peak.find_nearest": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {"gene2peak.gene2peak": {"tf": 2.449489742783178}, "peak2gene.peak2gene": {"tf": 3.3166247903554}, "peak2gene.find_nearest": {"tf": 2.23606797749979}, "process_features.get_nearest_features": {"tf": 2.449489742783178}, "process_features.constrain_features": {"tf": 2.8284271247461903}, "process_features.check_overlap": {"tf": 2.449489742783178}, "process_features.find_overlaps": {"tf": 3.3166247903554}, "process_features.gen_return_roi": {"tf": 2.6457513110645907}, "process_features.gen_init": {"tf": 1}, "process_features.update_to_add": {"tf": 1.7320508075688772}, "process_input.process_peaks": {"tf": 2.6457513110645907}, "process_input.read_input_MACS2_xls": {"tf": 1.7320508075688772}, "process_input.read_input_MACS2_bed": {"tf": 1.7320508075688772}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1.7320508075688772}, "process_input.read_input_SEACR": {"tf": 1.7320508075688772}, "process_input.read_input_BED6": {"tf": 1.7320508075688772}, "process_input.edit_peaks": {"tf": 2}, "write_output.write_to_excel": {"tf": 2.449489742783178}, "write_output.write_to_csv": {"tf": 2.449489742783178}}, "df": 19, "s": {"docs": {"gene2peak.gene2peak": {"tf": 2.23606797749979}, "gene2peak.find_nearest": {"tf": 2.23606797749979}, "peak2gene.peak2gene": {"tf": 1.7320508075688772}, "peak2gene.find_nearest": {"tf": 1.7320508075688772}, "process_features.get_nearest_features": {"tf": 1}, "process_input.process_peaks": {"tf": 1.7320508075688772}, "process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}, "process_input.read_input_SEACR": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}, "process_input.edit_peaks": {"tf": 1.7320508075688772}}, "df": 12}}}}, "d": {"docs": {"gene2peak.find_nearest": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "write_output.write_to_excel": {"tf": 1}, "write_output.write_to_csv": {"tf": 1}}, "df": 4}}, "o": {"docs": {}, "df": 0, "f": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1.4142135623730951}, "decompose_ref.save_csvs": {"tf": 1.7320508075688772}, "decompose_ref.split_jumble": {"tf": 1}, "gene2peak.gene2peak": {"tf": 2.23606797749979}, "gene2peak.find_nearest": {"tf": 1.4142135623730951}, "peak2gene.peak2gene": {"tf": 2.23606797749979}, "peak2gene.find_nearest": {"tf": 1.7320508075688772}, "process_features.get_nearest_features": {"tf": 2.23606797749979}, "process_features.constrain_features": {"tf": 3.4641016151377544}, "process_features.check_overlap": {"tf": 2.23606797749979}, "process_features.find_overlaps": {"tf": 3}, "process_features.gen_return_roi": {"tf": 1.7320508075688772}, "process_features.gen_init": {"tf": 1.7320508075688772}, "process_features.update_to_add": {"tf": 2.23606797749979}, "process_input.process_peaks": {"tf": 1.4142135623730951}, "process_input.edit_peaks": {"tf": 1}}, "df": 16}, "u": {"docs": {}, "df": 0, "t": {"docs": {"decompose_ref.save_csvs": {"tf": 1.4142135623730951}, "gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "write_output.write_to_excel": {"tf": 1}, "write_output.write_to_csv": {"tf": 1}}, "df": 5, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"decompose_ref.save_csvs": {"tf": 1}, "gene2peak.gene2peak": {"tf": 2.23606797749979}, "gene2peak.find_nearest": {"tf": 1}, "peak2gene.peak2gene": {"tf": 2.23606797749979}, "peak2gene.find_nearest": {"tf": 1}, "write_output.write_to_excel": {"tf": 2.23606797749979}, "write_output.write_to_csv": {"tf": 2.23606797749979}}, "df": 7, "s": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.save_csvs": {"tf": 1}, "decompose_ref.split_jumble": {"tf": 1}, "gene2peak.gene2peak": {"tf": 1}, "gene2peak.find_nearest": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "process_features.get_nearest_features": {"tf": 1}, "process_features.constrain_features": {"tf": 1}, "process_features.check_overlap": {"tf": 1}, "process_features.find_overlaps": {"tf": 1}, "process_features.gen_return_roi": {"tf": 1}, "process_features.gen_init": {"tf": 1}, "process_features.update_to_add": {"tf": 1}, "process_features.decompose_features": {"tf": 1}, "process_input.process_peaks": {"tf": 1}, "process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}, "process_input.read_input_SEACR": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}, "process_input.edit_peaks": {"tf": 1}, "write_output.write_to_excel": {"tf": 1}, "write_output.write_to_csv": {"tf": 1}}, "df": 24}}}}}}, "r": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.save_csvs": {"tf": 1.7320508075688772}, "gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"decompose_ref.split_jumble": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "process_features.get_nearest_features": {"tf": 1}}, "df": 3}}}}}}}, "w": {"docs": {}, "df": 0, "n": {"docs": {"decompose_ref.split_jumble": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"gene2peak.gene2peak": {"tf": 1.7320508075688772}, "peak2gene.peak2gene": {"tf": 1.7320508075688772}, "process_input.process_peaks": {"tf": 1.7320508075688772}, "process_input.edit_peaks": {"tf": 2}}, "df": 4, "s": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "process_input.process_peaks": {"tf": 1}, "process_input.edit_peaks": {"tf": 1}}, "df": 4}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "process_input.process_peaks": {"tf": 1}, "process_input.edit_peaks": {"tf": 1}}, "df": 4, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"process_features.check_overlap": {"tf": 1}}, "df": 1}}}}}}}}, "n": {"docs": {"gene2peak.find_nearest": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1}, "process_features.constrain_features": {"tf": 1}, "process_features.decompose_features": {"tf": 1}, "process_input.edit_peaks": {"tf": 1}}, "df": 5, "l": {"docs": {}, "df": 0, "y": {"docs": {"process_features.constrain_features": {"tf": 1}}, "df": 1}}, "e": {"docs": {"process_features.constrain_features": {"tf": 1}}, "df": 1}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"process_features.find_overlaps": {"tf": 2.23606797749979}}, "df": 1, "s": {"docs": {"process_features.check_overlap": {"tf": 1.4142135623730951}}, "df": 1}, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"process_features.find_overlaps": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}, "n": {"docs": {"process_features.gen_return_roi": {"tf": 1.4142135623730951}, "process_features.gen_init": {"tf": 1.4142135623730951}, "process_features.update_to_add": {"tf": 1.4142135623730951}}, "df": 3, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}}, "df": 1}}}, "n": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1.4142135623730951}, "decompose_ref.save_csvs": {"tf": 1.4142135623730951}}, "df": 2, "e": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.save_csvs": {"tf": 1}, "decompose_ref.split_jumble": {"tf": 1}, "gene2peak.gene2peak": {"tf": 1.4142135623730951}, "gene2peak.find_nearest": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1}, "process_features.get_nearest_features": {"tf": 1}, "process_features.constrain_features": {"tf": 1}, "process_features.check_overlap": {"tf": 1}, "process_features.find_overlaps": {"tf": 1}, "process_features.gen_return_roi": {"tf": 1}, "process_features.gen_init": {"tf": 1}, "process_features.update_to_add": {"tf": 1}, "process_features.decompose_features": {"tf": 1}, "process_input.process_peaks": {"tf": 1.4142135623730951}, "process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}, "process_input.read_input_SEACR": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}, "process_input.edit_peaks": {"tf": 1.4142135623730951}, "write_output.write_to_excel": {"tf": 1}, "write_output.write_to_csv": {"tf": 1}}, "df": 24}}, "w": {"docs": {"decompose_ref.split_jumble": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "gene2peak.find_nearest": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}}, "df": 4, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.save_csvs": {"tf": 1}, "gene2peak.gene2peak": {"tf": 1}, "gene2peak.find_nearest": {"tf": 1.7320508075688772}, "peak2gene.peak2gene": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1.4142135623730951}, "process_features.get_nearest_features": {"tf": 1}, "process_features.gen_return_roi": {"tf": 1}, "process_features.gen_init": {"tf": 1}, "process_features.decompose_features": {"tf": 1}}, "df": 10}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"process_features.constrain_features": {"tf": 2.8284271247461903}, "process_features.check_overlap": {"tf": 1}, "process_features.find_overlaps": {"tf": 1}, "process_features.update_to_add": {"tf": 1}}, "df": 4}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.save_csvs": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"decompose_ref.split_jumble": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"gene2peak.gene2peak": {"tf": 1.7320508075688772}, "gene2peak.find_nearest": {"tf": 1.7320508075688772}, "peak2gene.peak2gene": {"tf": 1.7320508075688772}, "peak2gene.find_nearest": {"tf": 1.7320508075688772}, "process_features.get_nearest_features": {"tf": 1.7320508075688772}, "process_features.gen_return_roi": {"tf": 1.4142135623730951}, "process_features.gen_init": {"tf": 1.4142135623730951}, "write_output.write_to_excel": {"tf": 1.4142135623730951}, "write_output.write_to_csv": {"tf": 1.4142135623730951}}, "df": 9}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"process_features.gen_return_roi": {"tf": 1}}, "df": 1}}}}}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"process_features.update_to_add": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"gene2peak.gene2peak": {"tf": 1.4142135623730951}, "peak2gene.peak2gene": {"tf": 1.4142135623730951}, "process_input.read_input_BED6": {"tf": 1}, "write_output.write_to_excel": {"tf": 1.4142135623730951}, "write_output.write_to_csv": {"tf": 1.4142135623730951}}, "df": 5}}}, "p": {"docs": {"process_features.constrain_features": {"tf": 2.8284271247461903}, "process_features.check_overlap": {"tf": 1}, "process_features.find_overlaps": {"tf": 1}, "process_features.update_to_add": {"tf": 1}}, "df": 4}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"process_features.constrain_features": {"tf": 2.8284271247461903}, "process_features.check_overlap": {"tf": 1}, "process_features.find_overlaps": {"tf": 1}, "process_features.update_to_add": {"tf": 1}}, "df": 4}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"process_features.gen_return_roi": {"tf": 1.4142135623730951}, "process_features.gen_init": {"tf": 1.4142135623730951}, "process_features.update_to_add": {"tf": 1.4142135623730951}}, "df": 3}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1.7320508075688772}, "decompose_ref.save_csvs": {"tf": 1}, "gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}}, "df": 5, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"decompose_ref.save_csvs": {"tf": 1.4142135623730951}, "gene2peak.gene2peak": {"tf": 1.4142135623730951}, "peak2gene.peak2gene": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1.4142135623730951}, "process_features.get_nearest_features": {"tf": 1.7320508075688772}, "process_features.constrain_features": {"tf": 3}, "process_features.check_overlap": {"tf": 1}, "process_features.find_overlaps": {"tf": 1}}, "df": 8}}}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"process_features.get_nearest_features": {"tf": 1}, "process_features.gen_return_roi": {"tf": 1.7320508075688772}}, "df": 2, "s": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.save_csvs": {"tf": 1}, "decompose_ref.split_jumble": {"tf": 1}, "gene2peak.gene2peak": {"tf": 1}, "gene2peak.find_nearest": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "process_features.get_nearest_features": {"tf": 1}, "process_features.constrain_features": {"tf": 1}, "process_features.check_overlap": {"tf": 1}, "process_features.find_overlaps": {"tf": 1}, "process_features.gen_return_roi": {"tf": 1}, "process_features.gen_init": {"tf": 1}, "process_features.update_to_add": {"tf": 1}, "process_features.decompose_features": {"tf": 1}, "process_input.process_peaks": {"tf": 1}, "process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}, "process_input.read_input_SEACR": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}, "process_input.edit_peaks": {"tf": 1}, "write_output.write_to_excel": {"tf": 1}, "write_output.write_to_csv": {"tf": 1}}, "df": 24}}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"decompose_ref.save_csvs": {"tf": 1}}, "df": 1}}}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"decompose_ref.split_jumble": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"process_features.get_nearest_features": {"tf": 1}, "process_input.process_peaks": {"tf": 1}, "process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}, "process_input.read_input_SEACR": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}, "process_input.edit_peaks": {"tf": 1.4142135623730951}}, "df": 8}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"process_input.process_peaks": {"tf": 1}, "process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}, "process_input.read_input_SEACR": {"tf": 1}, "process_input.read_input_BED6": {"tf": 1}}, "df": 6}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.save_csvs": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {"process_features.get_nearest_features": {"tf": 2}, "process_features.gen_return_roi": {"tf": 1.4142135623730951}}, "df": 2}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.save_csvs": {"tf": 1}, "decompose_ref.split_jumble": {"tf": 1}}, "df": 3}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1.4142135623730951}, "process_input.process_peaks": {"tf": 1}}, "df": 3}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"decompose_ref.split_jumble": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1.4142135623730951}, "decompose_ref.save_csvs": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"gene2peak.find_nearest": {"tf": 2}, "peak2gene.find_nearest": {"tf": 1.4142135623730951}, "process_features.check_overlap": {"tf": 1}, "process_features.find_overlaps": {"tf": 1}, "process_features.gen_return_roi": {"tf": 1.7320508075688772}, "process_features.gen_init": {"tf": 1.4142135623730951}, "process_features.update_to_add": {"tf": 1.4142135623730951}, "process_features.decompose_features": {"tf": 1.4142135623730951}, "process_input.edit_peaks": {"tf": 1}}, "df": 9, "i": {"docs": {}, "df": 0, "n": {"docs": {"process_features.constrain_features": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"write_output.write_to_excel": {"tf": 1}, "write_output.write_to_csv": {"tf": 1}}, "df": 2}}}}}, "x": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.save_csvs": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "x": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}}, "df": 2}}}}, "y": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.save_csvs": {"tf": 1}}, "df": 2}, "m": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}, "decompose_ref.save_csvs": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"decompose_ref.decompose_gtf": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"2": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "process_input.process_peaks": {"tf": 1}, "process_input.read_input_MACS2_xls": {"tf": 1}, "process_input.read_input_MACS2_bed": {"tf": 1}, "process_input.read_input_MACS2_bed_consensus": {"tf": 1}}, "df": 6}, "docs": {}, "df": 0}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"gene2peak.find_nearest": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1}, "process_features.decompose_features": {"tf": 1}}, "df": 3}}}, "s": {"docs": {"process_features.gen_return_roi": {"tf": 1.4142135623730951}, "process_features.gen_init": {"tf": 1.4142135623730951}, "process_features.update_to_add": {"tf": 1.4142135623730951}}, "df": 3}}, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"peak2gene.peak2gene": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1.4142135623730951}, "process_features.get_nearest_features": {"tf": 1.4142135623730951}, "process_features.constrain_features": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"decompose_ref.save_csvs": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "gene2peak.find_nearest": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "process_features.find_overlaps": {"tf": 2.23606797749979}, "process_features.gen_return_roi": {"tf": 1.4142135623730951}, "process_features.gen_init": {"tf": 1.4142135623730951}, "process_features.update_to_add": {"tf": 1.7320508075688772}}, "df": 8}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "process_input.process_peaks": {"tf": 1}}, "df": 3, "d": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "process_input.process_peaks": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"process_features.get_nearest_features": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {"peak2gene.peak2gene": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "process_features.get_nearest_features": {"tf": 1}, "process_features.constrain_features": {"tf": 1}}, "df": 4, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"peak2gene.peak2gene": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "process_features.get_nearest_features": {"tf": 1}, "process_features.constrain_features": {"tf": 1}}, "df": 4}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"process_features.update_to_add": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"process_features.update_to_add": {"tf": 1}}, "df": 1}}}}}}}, "k": {"docs": {"gene2peak.gene2peak": {"tf": 1}, "gene2peak.find_nearest": {"tf": 1}, "peak2gene.peak2gene": {"tf": 1}, "peak2gene.find_nearest": {"tf": 1}, "process_features.get_nearest_features": {"tf": 2}, "process_features.gen_return_roi": {"tf": 2.23606797749979}, "process_features.gen_init": {"tf": 1}, "write_output.write_to_excel": {"tf": 1.4142135623730951}, "write_output.write_to_csv": {"tf": 1.4142135623730951}}, "df": 9, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {"gene2peak.find_nearest": {"tf": 1.4142135623730951}, "peak2gene.find_nearest": {"tf": 1}, "process_features.decompose_features": {"tf": 1}}, "df": 3}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"process_features.check_overlap": {"tf": 1}, "process_features.gen_return_roi": {"tf": 1}}, "df": 2}}}}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"process_input.process_peaks": {"tf": 1}}, "df": 1}}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();